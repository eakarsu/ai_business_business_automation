// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  ADMIN
  PROCUREMENT_MANAGER
  EVALUATOR
  COMPLIANCE_OFFICER
  USER
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum QualificationStatus {
  PENDING
  QUALIFIED
  DISQUALIFIED
  UNDER_REVIEW
  SUSPENDED
}

enum DocumentType {
  BUSINESS_LICENSE
  FINANCIAL_STATEMENT
  INSURANCE_CERTIFICATE
  TECHNICAL_PROPOSAL
  COST_PROPOSAL
  COMPLIANCE_CERTIFICATE
  REFERENCE_LETTER
  OTHER
}

enum BidStatus {
  DRAFT
  SUBMITTED
  UNDER_EVALUATION
  EVALUATED
  AWARDED
  REJECTED
  WITHDRAWN
  COUNTER_OFFERED
}

enum EvaluationStatus {
  IN_PROGRESS
  COMPLETED
  APPROVED
  REJECTED
}

enum ComplianceResult {
  COMPLIANT
  NON_COMPLIANT
  PARTIALLY_COMPLIANT
  REQUIRES_REVIEW
}

enum NotificationType {
  VENDOR_QUALIFICATION
  BID_EVALUATION
  COMPLIANCE_ALERT
  SYSTEM_NOTIFICATION
  DEADLINE_REMINDER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum CounterOfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
  UNDER_REVIEW
}

// Models
model User {
  id              String            @id @default(cuid())
  email           String            @unique
  password        String
  firstName       String
  lastName        String
  role            Role              @default(USER)
  department      String?
  organization    String?
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  lastLoginAt     DateTime?

  // Relations
  vendorsCreated    Vendor[]          @relation("VendorCreatedBy")
  bidEvaluations    BidEvaluation[]
  complianceChecks  ComplianceCheck[]
  notifications     Notification[]
  auditLogs         AuditLog[]

  @@map("users")
}

model Vendor {
  id                   String              @id @default(cuid())
  name                 String
  registrationNumber   String?             @unique
  email                String?
  phone                String?
  website              String?
  address              Json?
  businessType         String?
  industryType         String?
  yearEstablished      Int?
  employeeCount        Int?
  annualRevenue        Float?
  overallScore         Float?
  financialScore       Float?
  technicalScore       Float?
  complianceScore      Float?
  experienceScore      Float?
  riskLevel            RiskLevel           @default(MEDIUM)
  qualificationStatus  QualificationStatus @default(PENDING)
  isActive             Boolean             @default(true)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  createdById          String

  // Relations
  createdBy            User                @relation("VendorCreatedBy", fields: [createdById], references: [id])
  documents            VendorDocument[]
  bids                 Bid[]
  evaluations          VendorEvaluation[]
  complianceChecks     ComplianceCheck[]
  products             Product[]

  @@map("vendors")
}

model VendorDocument {
  id              String       @id @default(cuid())
  vendorId        String
  documentType    DocumentType
  fileName        String
  fileUrl         String
  fileSize        Int
  mimeType        String
  extractedText   String?
  embedding       Float[]
  analysisResult  Json?
  uploadedAt      DateTime     @default(now())

  // Relations
  vendor          Vendor       @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("vendor_documents")
}

model Bid {
  id                String         @id @default(cuid())
  title             String
  description       String?
  rfpNumber         String?
  vendorId          String
  productId         String?        // Added for product relation
  proposedAmount    Float?
  proposedTimeline  Int?
  technicalApproach String?
  status            BidStatus      @default(SUBMITTED)
  submittedAt       DateTime       @default(now())
  evaluatedAt       DateTime?
  technicalScore    Float?
  costScore         Float?
  timelineScore     Float?
  riskScore         Float?
  overallScore      Float?

  // Relations
  vendor            Vendor         @relation(fields: [vendorId], references: [id])
  product           Product?       @relation(fields: [productId], references: [id])
  documents         BidDocument[]
  evaluations       BidEvaluation[]
  counterOffers     CounterOffer[]

  @@map("bids")
}

model BidDocument {
  id              String       @id @default(cuid())
  bidId           String
  documentType    DocumentType
  fileName        String
  fileUrl         String
  fileSize        Int
  mimeType        String
  extractedText   String?
  embedding       Float[]
  analysisResult  Json?
  uploadedAt      DateTime     @default(now())

  // Relations
  bid             Bid          @relation(fields: [bidId], references: [id], onDelete: Cascade)

  @@map("bid_documents")
}

model BidEvaluation {
  id              String           @id @default(cuid())
  bidId           String
  evaluatorId     String
  technicalScore  Float
  costScore       Float
  timelineScore   Float
  riskScore       Float
  overallScore    Float
  strengths       String[]
  weaknesses      String[]
  recommendations String[]
  comments        String?
  status          EvaluationStatus @default(IN_PROGRESS)
  evaluatedAt     DateTime         @default(now())

  // Relations
  bid             Bid              @relation(fields: [bidId], references: [id])
  evaluator       User             @relation(fields: [evaluatorId], references: [id])

  @@unique([bidId, evaluatorId])
  @@map("bid_evaluations")
}

model VendorEvaluation {
  id              String    @id @default(cuid())
  vendorId        String
  evaluationType  String
  overallScore    Float
  categoryScores  Json
  riskLevel       RiskLevel
  strengths       String[]
  weaknesses      String[]
  recommendations String[]
  evaluatedAt     DateTime  @default(now())

  // Relations
  vendor          Vendor    @relation(fields: [vendorId], references: [id])

  @@map("vendor_evaluations")
}

model ComplianceCheck {
  id               String           @id @default(cuid())
  entityType       String
  entityId         String
  vendorId         String?
  regulationType   String
  regulationName   String
  checkResult      ComplianceResult
  complianceScore  Float
  issues           String[]
  criticalIssues   String[]
  recommendations  String[]
  checkedAt        DateTime         @default(now())
  checkedById      String

  // Relations
  vendor           Vendor?          @relation(fields: [vendorId], references: [id])
  checkedBy        User             @relation(fields: [checkedById], references: [id])

  @@map("compliance_checks")
}

model Notification {
  id          String             @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  priority    Priority           @default(MEDIUM)
  isRead      Boolean            @default(false)
  createdAt   DateTime           @default(now())
  readAt      DateTime?

  // Relations
  user        User               @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  entityType  String
  entityId    String
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Product {
  id                   String    @id @default(cuid())
  vendorId             String
  name                 String
  description          String?
  category             String
  subcategory          String?
  sku                  String?
  manufacturer         String?
  model                String?
  unitPrice            Float?
  minOrderQty          Int?
  maxOrderQty          Int?
  currency             String    @default("USD")
  specifications       Json?
  dimensions           Json?
  weight               Float?
  certifications       String[]
  isActive             Boolean   @default(true)
  inStock              Boolean   @default(true)
  stockQuantity        Int?
  leadTime             Int?
  complianceStandards  String[]
  qualityRatings       Json?
  imageUrl             String?   // Added from migration
  images               String[]  // Added from migration
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  vendor               Vendor    @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  bids                 Bid[]     // Added relation to bids

  @@map("products")
}

model CounterOffer {
  id                   String              @id @default(cuid())
  bidId                String
  proposedAmount       Float?
  proposedTimeline     Int?
  modifications        String
  justification        String
  technicalChanges     String?
  alternativeApproach  String?
  status               CounterOfferStatus  @default(PENDING)
  createdAt            DateTime            @default(now())
  respondedAt          DateTime?
  expiresAt            DateTime?
  aiRecommendation     String?
  riskAssessment       Json?

  // Relations
  bid                  Bid                 @relation(fields: [bidId], references: [id], onDelete: Cascade)

  @@map("counter_offers")
}

