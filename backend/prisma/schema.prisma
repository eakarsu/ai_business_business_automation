generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  role        Role     @default(USER)
  department  String?
  organization String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?

  // Relations
  createdVendors    Vendor[]     @relation("CreatedBy")
  evaluatedBids     BidEvaluation[]
  complianceChecks  ComplianceCheck[]
  auditLogs         AuditLog[]
  notifications     Notification[]

  @@map("users")
}

model Vendor {
  id                String   @id @default(cuid())
  name              String
  registrationNumber String? @unique
  email             String?
  phone             String?
  website           String?
  address           Json?
  
  // Business Information
  businessType      String?
  industryType      String?
  yearEstablished   Int?
  employeeCount     Int?
  annualRevenue     Float?
  
  // Qualification Scores
  overallScore      Float?
  financialScore    Float?
  technicalScore    Float?
  complianceScore   Float?
  experienceScore   Float?
  riskLevel         RiskLevel @default(MEDIUM)
  
  // Status
  qualificationStatus QualificationStatus @default(PENDING)
  isActive          Boolean  @default(true)
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdById       String
  createdBy         User     @relation("CreatedBy", fields: [createdById], references: [id])
  
  // Relations
  bids              Bid[]
  documents         VendorDocument[]
  evaluations       VendorEvaluation[]
  complianceChecks  ComplianceCheck[]
  products          Product[]
  
  @@map("vendors")
}

model VendorDocument {
  id          String   @id @default(cuid())
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  documentType DocumentType
  fileName    String
  fileUrl     String
  fileSize    Int
  mimeType    String
  
  // AI Analysis
  extractedText String?
  embedding     Float[]
  analysisResult Json?
  
  uploadedAt  DateTime @default(now())
  
  @@map("vendor_documents")
}

model Bid {
  id              String   @id @default(cuid())
  title           String
  description     String?
  rfpNumber       String?
  vendorId        String
  vendor          Vendor   @relation(fields: [vendorId], references: [id])
  
  // Bid Details
  proposedAmount  Float?
  proposedTimeline Int? // in days
  technicalApproach String?
  
  // Status
  status          BidStatus @default(SUBMITTED)
  submittedAt     DateTime @default(now())
  evaluatedAt     DateTime?
  
  // AI Scores
  technicalScore  Float?
  costScore       Float?
  timelineScore   Float?
  riskScore       Float?
  overallScore    Float?
  
  // Relations
  documents       BidDocument[]
  evaluations     BidEvaluation[]
  counterOffers   CounterOffer[]
  
  @@map("bids")
}

model BidDocument {
  id          String   @id @default(cuid())
  bidId       String
  bid         Bid      @relation(fields: [bidId], references: [id], onDelete: Cascade)
  
  documentType DocumentType
  fileName    String
  fileUrl     String
  fileSize    Int
  mimeType    String
  
  // AI Analysis
  extractedText String?
  embedding     Float[]
  analysisResult Json?
  
  uploadedAt  DateTime @default(now())
  
  @@map("bid_documents")
}

model BidEvaluation {
  id            String   @id @default(cuid())
  bidId         String
  bid           Bid      @relation(fields: [bidId], references: [id])
  evaluatorId   String
  evaluator     User     @relation(fields: [evaluatorId], references: [id])
  
  // Evaluation Scores
  technicalScore    Float
  costScore         Float
  timelineScore     Float
  riskScore         Float
  overallScore      Float
  
  // Comments
  strengths         String[]
  weaknesses        String[]
  recommendations   String[]
  comments          String?
  
  status            EvaluationStatus @default(IN_PROGRESS)
  evaluatedAt       DateTime @default(now())
  
  @@unique([bidId, evaluatorId])
  @@map("bid_evaluations")
}

model VendorEvaluation {
  id            String   @id @default(cuid())
  vendorId      String
  vendor        Vendor   @relation(fields: [vendorId], references: [id])
  
  // Evaluation Details
  evaluationType String
  overallScore   Float
  categoryScores Json
  riskLevel      RiskLevel
  
  // AI Analysis Results
  strengths      String[]
  weaknesses     String[]
  recommendations String[]
  
  evaluatedAt    DateTime @default(now())
  
  @@map("vendor_evaluations")
}

model ComplianceCheck {
  id                String   @id @default(cuid())
  entityType        String   // 'vendor' or 'bid'
  entityId          String
  
  // For vendor compliance
  vendorId          String?
  vendor            Vendor?  @relation(fields: [vendorId], references: [id])
  
  // Check Details
  regulationType    String
  regulationName    String
  checkResult       ComplianceResult
  complianceScore   Float
  
  // Issues and Recommendations
  issues            String[]
  criticalIssues    String[]
  recommendations   String[]
  
  // Metadata
  checkedAt         DateTime @default(now())
  checkedById       String
  checkedBy         User     @relation(fields: [checkedById], references: [id])
  
  @@map("compliance_checks")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  type        NotificationType
  title       String
  message     String
  priority    Priority @default(MEDIUM)
  
  // Metadata
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  readAt      DateTime?
  
  @@map("notifications")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  action      String
  entityType  String
  entityId    String
  
  // Change Details
  oldValues   Json?
  newValues   Json?
  
  // Metadata
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())
  
  @@map("audit_logs")
}

model CounterOffer {
  id              String   @id @default(cuid())
  bidId           String
  bid             Bid      @relation(fields: [bidId], references: [id], onDelete: Cascade)
  
  // Counter Offer Details
  proposedAmount  Float?
  proposedTimeline Int? // in days
  modifications   String // Description of changes
  justification   String // Reasoning for the counter offer
  
  // Technical Changes
  technicalChanges String?
  alternativeApproach String?
  
  // Status and Metadata
  status          CounterOfferStatus @default(PENDING)
  createdAt       DateTime @default(now())
  respondedAt     DateTime?
  expiresAt       DateTime?
  
  // AI Analysis
  aiRecommendation String?
  riskAssessment   Json?
  
  @@map("counter_offers")
}

model Product {
  id              String   @id @default(cuid())
  vendorId        String
  vendor          Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  // Product Information
  name            String
  description     String?
  category        String
  subcategory     String?
  sku             String?
  manufacturer    String?
  model           String?
  imageUrl        String?
  images          String[]
  
  // Pricing
  unitPrice       Float?
  minOrderQty     Int?
  maxOrderQty     Int?
  currency        String   @default("USD")
  
  // Specifications
  specifications  Json?
  dimensions      Json?
  weight          Float?
  certifications  String[]
  
  // Availability
  isActive        Boolean  @default(true)
  inStock         Boolean  @default(true)
  stockQuantity   Int?
  leadTime        Int?     // in days
  
  // Compliance & Quality
  complianceStandards String[]
  qualityRatings      Json?
  
  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("products")
}

// Enums
enum Role {
  ADMIN
  PROCUREMENT_MANAGER
  EVALUATOR
  COMPLIANCE_OFFICER
  USER
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum QualificationStatus {
  PENDING
  QUALIFIED
  DISQUALIFIED
  UNDER_REVIEW
  SUSPENDED
}

enum DocumentType {
  BUSINESS_LICENSE
  FINANCIAL_STATEMENT
  INSURANCE_CERTIFICATE
  TECHNICAL_PROPOSAL
  COST_PROPOSAL
  COMPLIANCE_CERTIFICATE
  REFERENCE_LETTER
  OTHER
}

enum BidStatus {
  DRAFT
  SUBMITTED
  UNDER_EVALUATION
  EVALUATED
  AWARDED
  REJECTED
  WITHDRAWN
  COUNTER_OFFERED
}

enum EvaluationStatus {
  IN_PROGRESS
  COMPLETED
  APPROVED
  REJECTED
}

enum ComplianceResult {
  COMPLIANT
  NON_COMPLIANT
  PARTIALLY_COMPLIANT
  REQUIRES_REVIEW
}

enum NotificationType {
  VENDOR_QUALIFICATION
  BID_EVALUATION
  COMPLIANCE_ALERT
  SYSTEM_NOTIFICATION
  DEADLINE_REMINDER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum CounterOfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
  UNDER_REVIEW
}